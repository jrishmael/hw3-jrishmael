-- Table: public.service_request

-- DROP TABLE IF EXISTS public.service_request;

CREATE TABLE IF NOT EXISTS public.service_request
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id uuid NOT NULL,
    email text COLLATE pg_catalog."default",
    short_desc text COLLATE pg_catalog."default",
    long_desc text COLLATE pg_catalog."default",
    accept_reject boolean DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    name text COLLATE pg_catalog."default",
    CONSTRAINT service_request_pkey PRIMARY KEY (id),
    CONSTRAINT service_request_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.service_request
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.service_request
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.service_request TO anon;

GRANT ALL ON TABLE public.service_request TO authenticated;

GRANT ALL ON TABLE public.service_request TO postgres;

GRANT ALL ON TABLE public.service_request TO service_role;

GRANT ALL ON TABLE public.service_request TO supabase_admin;
-- POLICY: Allow insert for authenticated users

-- DROP POLICY IF EXISTS "Allow insert for authenticated users" ON public.service_request;

CREATE POLICY "Allow insert for authenticated users"
    ON public.service_request
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK (true);
-- POLICY: Enable access for select statements

-- DROP POLICY IF EXISTS "Enable access for select statements" ON public.service_request;

CREATE POLICY "Enable access for select statements"
    ON public.service_request
    AS PERMISSIVE
    FOR SELECT
    TO authenticated
    USING (true);
-- POLICY: enable delete for users if id matches

-- DROP POLICY IF EXISTS "enable delete for users if id matches" ON public.service_request;

CREATE POLICY "enable delete for users if id matches"
    ON public.service_request
    AS PERMISSIVE
    FOR DELETE
    TO authenticated
    USING ((auth.uid() = user_id));
-- POLICY: only admin auth

-- DROP POLICY IF EXISTS "only admin auth" ON public.service_request;

CREATE POLICY "only admin auth"
    ON public.service_request
    AS PERMISSIVE
    FOR UPDATE
    TO authenticated
    USING ((auth.uid() IN ( SELECT admins_mapping.id
   FROM admins_mapping)))
    WITH CHECK (true);